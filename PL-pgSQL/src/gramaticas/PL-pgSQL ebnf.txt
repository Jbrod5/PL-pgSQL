NOTACION EBNF:
|  -> or
[] -> opcional (cero o una vez)
{} -> repeticion (cero o más veces)
() -> agrupacion 
"..."_"..." -> rango de caracteres (como [a-z])
;  -> final de regla

// - - - - - - - - - - - - - - - - - PUNTO DE ENTRADA - - - - - - - - - - - - - - - - - 

// El programa solo puede iniciar con bloques, funciones o procedimientos
programa = { bloque | funcion | procedimiento } ;

//- - - - - - - - - - - - - - - - Cosas generales - - - - - - - - - - - - - - - - - - - 
//Ignorar
comentario = '--' ~[\r\n]*           // Comentario de una línea
           | '/*' .*? '*/';          // Comentario multilínea (lazy para evitar greedy)


// - - valores - - - - - - - -
letra          = ("a"_"z"|"A"_"Z");
digito         = "0"_"9";
identificador  = (letra | "_") {letra | digito | "_"};

true           = "TRUE";
false          = "FALSE";

booleano       = true | false;
string         = '"' (~["\r\n])* '"';      // Texto con comillas dobles
char_literal   = "'" (letra|digito) "'";   // Un solo carácter con comillas simples
numero         = digito+;
fecha          = digito digito digito digito "-" digito digito "-" digito digito;

// Funciones Built-in como valores
func_builtin   = now_func
               | concat_func
               | modify_date_func
               | cast_func
               | random_func
               | substring_func
               | array_push_func
               | len_func;

// Definición de funciones integradas
now_func           = "NOW" "(" ")";
concat_func        = "CONCAT" "(" valor {coma valor} ")";
modify_date_func   = "MODIFY_DATE" "(" valor coma "day:" numero coma "month:" numero coma "year:" numero ")";
cast_func          = "CAST" "(" valor coma tipo ")";
random_func        = "RANDOM" "(" ")";
substring_func     = "SUBSTRING" "(" valor coma numero coma numero ")";
array_push_func    = "ARRAY_PUSH" "(" valor coma valor ")";
len_func           = "LEN" "(" valor ")";

valor          = string | char_literal | numero | fecha | identificador | booleano | func_builtin;
valores        = valor {coma valor};


// - - signos - - - - - - - - - -
puntocoma      = ";";
asignacion     = ":=";
coma           = ",";
dot            = ".";

mas            = "+";
menos          = "-";
por            = "*";
dividido       = "/";
elevado        = "^";

mayor       = ">"   ;
menor       = "<"   ;
mayor_igual = ">="  ;
menor_igual = "<="  ;
igual       = "="   ;
diferente   = "<>"  ;

or  = "OR" ;
and = "AND";
not = "NOT";


// - - - - - - - - - - - - - - - - Declaraciones y tipado - - - - - - - - - - - - 

declare        = "DECLARE"; 
cor_opn        = "[";
cor_cls        = "]";

integer        = "INTEGER"; 
decimal        = "DECIMAL"; 
varchar        = "VARCHAR" "(" numero ")"; // VARCHAR con tamaño
char           = "CHAR"; 
boolean        = "BOOLEAN"; 
date           = "DATE"; 
array          = "ARRAY"; 

tipo_base      = integer | decimal | varchar | char | boolean | date ;
tipo_array     = tipo_base cor_opn cor_cls ;   // ARRAY de tipo_base
tipo           = tipo_base | tipo_array;

// Declaraciones normales
declaracion_normal 
               = identificador tipo puntocoma
               | identificador tipo asignacion expresion puntocoma;  

// Declaración de arrays
declaracion_array 
               = identificador tipo_array puntocoma
               | identificador tipo_array asignacion array cor_opn valores cor_cls puntocoma;  

// Agrupador de declaraciones
declaraciones  = (declaracion_normal | declaracion_array)+;

// Regla principal para bloque DECLARE
declaracion    = declare declaraciones; 


// - - - - - - - - - - - - - - - - Operaciones - - - - - - - - - - - - - - - - 

expresion = valor_aritmetico
          | valor_condicional_booleano
          | valor;

// Operaciones aritméticas
suma           = expresion mas expresion;
resta          = expresion menos expresion;
multiplicacion = expresion por expresion;
division       = expresion dividido expresion;
potencia       = expresion elevado expresion;

// Operaciones relacionales
op_mayor_que   = expresion mayor        expresion;
op_menor_que   = expresion menor        expresion; 
op_mayor_igual = expresion mayor_igual  expresion; 
op_menor_igual = expresion menor_igual  expresion; 
op_igual       = expresion igual        expresion; 
op_diferente   = expresion diferente    expresion;  

// Operaciones booleanas
op_or  = expresion or expresion;   
op_and = expresion and expresion;
op_not = not expresion; 

valor_aritmetico = suma
                 | resta
                 | multiplicacion
                 | division
                 | potencia
                 ;

valor_condicional_booleano = op_mayor_que
                            | op_menor_que
                            | op_mayor_igual
                            | op_menor_igual
                            | op_igual
                            | op_diferente
                            | op_or
                            | op_and
                            | op_not
                            ;


// - - - - - - - - - - - - - - - - Bloques de código - - - - - - - - - - - - - 

begin          = "BEGIN";
end            = "END";

// Un bloque BEGIN...END puede contener sentencias
// Declaración opcional al inicio
bloque         = [ declaracion ] begin { sentencia_en_bloque } end puntocoma;

// Dentro de un bloque, se permiten todas las sentencias
sentencia_en_bloque = declaracion
                    | if_simple
                    | if_else
                    | case_when
                    | ciclo_for
                    | ciclo_foreach_array
                    | ciclo_foreach_select
                    | exit_stmt
                    | continue_stmt
                    | raise_notice
                    | raise_warning
                    | raise_exception
                    | raise_simple
                    | trans_commit
                    | trans_rollback
                    | funcion
                    | procedimiento
                    | bloque
                    | select_stmt     // dml permitido solo dentro de bloque
                    | insert_stmt     // dml permitido solo dentro de bloque
                    | update_stmt     // dml permitido solo dentro de bloque
                    | delete_stmt     // dml permitido solo dentro de bloque
                    ;


// - - - - - - - - - - - - - - - - Control de flujo - - - - - - - - - - - - - 

if_simple      = "IF" expresion "THEN" { sentencia_en_bloque } "END IF" puntocoma;
if_else        = "IF" expresion "THEN" { sentencia_en_bloque } "ELSE" { sentencia_en_bloque } "END IF" puntocoma;

case_when      = "CASE" {"WHEN" expresion "THEN" { sentencia_en_bloque }} ["ELSE" { sentencia_en_bloque }] "END CASE" puntocoma;


// - - - - - - - - - - - - - - - - Ciclos - - - - - - - - - - - - - - - - - 

ciclo_for      = "FOR" identificador "IN" numero ".." numero "LOOP" { sentencia_en_bloque } "END LOOP" puntocoma;

ciclo_foreach_array = "FOREACH" identificador "IN" "ARRAY" identificador "LOOP" { sentencia_en_bloque } "END LOOP" puntocoma;

ciclo_foreach_select = "FOREACH" identificador "IN" select_stmt "LOOP" { sentencia_en_bloque } "END LOOP" puntocoma;


// - - - - - - - - - - - - - - - - Sentencias de control - - - - - - - - - - - - 

exit_stmt      = "EXIT" puntocoma;
continue_stmt  = "CONTINUE" puntocoma;


// - - - - - - - - - - - - - - - - Mensajes RAISE - - - - - - - - - - - - - 

raise_notice   = "RAISE NOTICE" string {coma valor} puntocoma;
raise_warning  = "RAISE WARNING" string {coma valor} puntocoma;
raise_exception= "RAISE EXCEPTION" string {coma valor} puntocoma;
raise_simple   = "RAISE" puntocoma;


// - - - - - - - - - - - - - - - - Transaccionalidad - - - - - - - - - - - - - 

trans_commit   = begin { sentencia_en_bloque } "COMMIT" puntocoma;
trans_rollback = begin { sentencia_en_bloque } "ROLLBACK" puntocoma;


// - - - - - - - - - - - - - - - - Funciones y Procedimientos - - - - - - - - - - 

funcion = "CREATE FUNCTION" identificador "(" parametros? ")" 
          "RETURNS" tipo 
          "AS" "$$" { sentencia_en_bloque } "RETURN" valor puntocoma "$$" 
          "LANGUAGE plpgsql" puntocoma;

procedimiento = "CREATE PROCEDURE" identificador "(" parametros? ")" 
                "LANGUAGE plpgsql" "AS" "$$" { sentencia_en_bloque } "$$" puntocoma;

parametros = parametro {coma parametro};
parametro  = identificador tipo;


// - - - - - - - - - - - - - - - - DML - - - - -  - - - - - - - - - - - 

insert_stmt     = "INSERT", "INTO", identificador, "(", columnas, ")", 
                  "VALUES", "(", valores, ")", puntocoma ;

update_stmt     = "UPDATE", identificador, "SET", asignaciones, 
                  "WHERE", condicion, puntocoma ;

delete_stmt     = "DELETE", "FROM", identificador, 
                  "WHERE", condicion, puntocoma ;

select_stmt     = "SELECT", columnas, "FROM", identificador, 
                  [ join_list ], [ where_clause ], puntocoma ;

columna_prefijo = [ identificador, dot ], identificador ;
columnas        = columna_prefijo, { coma, columna_prefijo } ;

join_list       = join_clause, { join_clause } ;
join_clause     = ( "JOIN" | "LEFT", "JOIN" ), identificador, 
                  "ON", columna_prefijo, igual, columna_prefijo ;

asignaciones    = identificador, igual, valor, 
                  { coma, identificador, igual, valor } ;

where_clause    = "WHERE", expresion ;
condicion       = expresion ;
